name: Dev CI

on:
  workflow_dispatch:
  pull_request:
    branches: [ develop ]
    types: [opened, synchronize, reopened, labeled]

permissions:
  contents: read
  pull-requests: write

jobs:
  check_pr_readiness:
    name: Check PR Readiness
    runs-on: ubuntu-latest
    outputs:
      is_ready: ${{ steps.check_status.outputs.is_ready }}
    steps:
    - name: Check PR status
      id: check_status
      uses: actions/github-script@v7.0.1
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const { data: pr } = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });

          const { data: labels } = await github.rest.issues.listLabelsOnIssue({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number
          });
          
          const isForReview = labels.some(label => label.name === 'PR - for review');
          const isReviewed = labels.some(label => label.name === 'PR - reviewed - ready');
          const hasRequiredLabel = isForReview || isReviewed;

          const { data: reviews } = await github.rest.pulls.listReviews({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });

          reviews.sort((a, b) => new Date(b.submitted_at) - new Date(a.submitted_at));

          const latestReview = reviews[0];
          const hasChangesRequested = latestReview && latestReview.state === 'CHANGES_REQUESTED';

          const isReady = hasRequiredLabel && !hasChangesRequested;
          
          core.setOutput('is_ready', isReady.toString());

          if (!isReady) {
            let message = '';
            if (!hasRequiredLabel) {
              message = "This PR is not ready for checks. Please add either the \"PR - for review\" or \"PR - reviewed - ready\" label when it's ready to run checks.";
            } else if (hasChangesRequested) {
              message = `Changes have been requested on this PR in the latest review. Please address the requested changes before running checks again. (Latest review ID: ${latestReview.id})`;
            }

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const botComments = comments.filter(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Changes have been requested on this PR')
            );

            const shouldComment = !botComments.length || 
              (hasChangesRequested && !botComments.some(comment => comment.body.includes(`Latest review ID: ${latestReview.id}`)));

            if (shouldComment) {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: message
              });
            }
            
            core.setFailed('PR is not ready for checks.');
          } else {
            console.log('PR is ready for checks. Proceeding with checks.');
          }

  determine_changes:
    name: Determine Changed Components
    needs: check_pr_readiness
    if: needs.check_pr_readiness.outputs.is_ready == 'true'
    runs-on: ubuntu-latest
    outputs:
      frontend_changed: ${{ steps.filter.outputs.frontend }}
      backend_changed: ${{ steps.filter.outputs.backend }}
    steps:
    - uses: actions/checkout@v3
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          frontend:
            - 'Happy Face/**'
          backend:
            - 'Smile Base/**'

  frontend:
    name: Frontend Checks - Test, Lint, and Build
    needs: determine_changes
    if: needs.determine_changes.outputs.frontend_changed == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install dependencies
      working-directory: ./Happy Face
      run: npm ci
      
    - name: Run linting
      working-directory: ./Happy Face
      run: npm run lint
      
    - name: Run tests
      working-directory: ./Happy Face
      run: npm test
      
    - name: Build frontend
      working-directory: ./Happy Face
      run: npm run build

  backend:
    name: Backend Checks - Test and Build
    needs: determine_changes
    if: needs.determine_changes.outputs.backend_changed == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'temurin'
      
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
        
    - name: Run tests
      working-directory: ./Smile Base
      run: ./gradlew test
      
    - name: Build backend
      working-directory: ./Smile Base
      run: ./gradlew build -x test

  add-labels:
    name: Report CI Workflow Result
    needs: [determine_changes, frontend, backend]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - uses: actions/github-script@v7.0.1
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const frontend_changed = '${{ needs.determine_changes.outputs.frontend_changed }}' === 'true';
          const backend_changed = '${{ needs.determine_changes.outputs.backend_changed }}' === 'true';
          const frontend_status = '${{ needs.frontend.result }}';
          const backend_status = '${{ needs.backend.result }}';
          let labels_to_add = [];
          let labels_to_remove = [];
          
          if (frontend_changed) {
            if (frontend_status === 'success') {
              labels_to_add.push('CI - Frontend Checks Pass');
              labels_to_remove.push('CI - Frontend Checks Failed');
            } else {
              labels_to_add.push('CI - Frontend Checks Failed');
              labels_to_remove.push('CI - Frontend Checks Pass');
            }
          }
          
          if (backend_changed) {
            if (backend_status === 'success') {
              labels_to_add.push('CI - Backend Checks Pass');
              labels_to_remove.push('CI - Backend Checks Failed');
            } else {
              labels_to_add.push('CI - Backend Checks Failed');
              labels_to_remove.push('CI - Backend Checks Pass');
            }
          }
          
          for (const label of labels_to_remove) {
            try {
              await github.rest.issues.removeLabel({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: label
              });
            } catch (e) {}
          }
          
          if (labels_to_add.length > 0) {
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: labels_to_add
            });
          }
